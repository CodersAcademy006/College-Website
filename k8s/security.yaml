apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: college-website-network-policy
spec:
  podSelector:
    matchLabels:
      app: college-website
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 27017
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: college-website
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: college-website-role
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: college-website-role-binding
subjects:
- kind: ServiceAccount
  name: college-website
roleRef:
  kind: Role
  name: college-website-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: college-website-cert
spec:
  secretName: college-website-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - college-website.example.com
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: college-website-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - college-website.example.com
    secretName: college-website-tls
  rules:
  - host: college-website.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: college-website
            port:
              number: 80
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: college-website-psp
spec:
  privileged: false
  seLinux:
    rule: RunAsAny
  runAsUser:
    rule: MustRunAsNonRoot
    ranges:
    - min: 1000
      max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1000
      max: 65535
  volumes:
  - 'configMap'
  - 'emptyDir'
  - 'projected'
  - 'secret'
  - 'downwardAPI'
  - 'persistentVolumeClaim' 